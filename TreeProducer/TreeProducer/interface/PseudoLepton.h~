#ifndef PseudoLepton_h
#define PseudoLepton_h

#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/MuonReco/interface/MuonTime.h"
#include "DataFormats/MuonReco/interface/MuonEnergy.h"
#include "DataFormats/MuonReco/interface/MuonTimeExtra.h"
#include "DataFormats/MuonReco/interface/MuonTimeExtraFwd.h"

class PseudoLepton;
typedef std::vector<PseudoLepton>              PseudoLeptonCollection;
typedef edm::Ref<PseudoLeptonCollection>       PseudoLeptonRef;
typedef edm::RefVector<PseudoLeptonCollection> PseudoLeptonRefVector;

class PseudoLepton : public reco::Track
{
 private:

  reco::Particle::LorentzVector p4_;
  const reco::GenParticle* genPart_;
  unsigned genPartSize_;
  bool isStandAloneMuon_;
  bool isGlobalMuon_;
  bool isTrackerMuon_;
  bool isLooseMuon_;
  bool isCentralTrack_;

//  reco::MuonTime muonTime_;
//  reco::MuonEnergy muonE_;
//  reco::MuonTimeExtra timec_;
//  reco::MuonTimeExtra timedt_;
//  reco::MuonTimeExtra timecsc_;

 public:

  PseudoLepton();
  PseudoLepton(const reco::Track & aTrack);
  virtual ~PseudoLepton();
  
  /// required reimplementation of the Candidate's clone method
  virtual PseudoLepton * clone() const { return new PseudoLepton(*this); }

  /// stuff that we need that is not in reco::Track
  const reco::Particle::LorentzVector& p4() const { return p4_; }
  const reco::GenParticle* genParticle(unsigned i=0) const { if (genPartSize_) return genPart_; else return 0; }
  unsigned genParticlesSize() const { return genPartSize_; }
  bool isTrackerMuon() const { return isTrackerMuon_; }
  bool isGlobalMuon() const { return isGlobalMuon_; }
  bool isStandAloneMuon() const { return isStandAloneMuon_; }
  bool isLooseMuon() const { return isLooseMuon_; }
  bool isCentralTrack() const { return isCentralTrack_; }

  void isStandAloneMuon(bool isMuon) { isStandAloneMuon_=isMuon; }
  void isGlobalMuon(bool isMuon) { isGlobalMuon_=isMuon; }
  void isTrackerMuon(bool isMuon) { isTrackerMuon_=isMuon; }
  void isCentralTrack( bool isTrack) { isCentralTrack_=isTrack; }
  void isLooseMuon( bool isLooseMuon ) { isLooseMuon_=isLooseMuon; }
  void setGenParticle(const reco::GenParticle& gen) { genPart_=&gen; genPartSize_=1; }

//  void muonTime(const reco::MuonTime & muonTime);
//  void muonEnergy(const reco::MuonEnergy & muonE);
//  void fillMuonExtraTime(reco::MuonTimeExtra & muonExtraTime_, const reco::MuonTimeExtra & muonExtraTime);
//  void muonTimeC(const reco::MuonTimeExtra & timec) { fillMuonExtraTime(timec_, timec); }
//  void muonTimeDT(const reco::MuonTimeExtra & timedt) { fillMuonExtraTime(timedt_, timedt); }
//  void muonTimeCSC(const reco::MuonTimeExtra & timecsc) { fillMuonExtraTime(timecsc_, timecsc); }

//  const reco::MuonTime & muonTime() const { return muonTime_; }
//  const reco::MuonEnergy & muonEnergy() const { return muonE_; }
//  const reco::MuonTimeExtra & muonTimeC() const { return timec_; }
//  const reco::MuonTimeExtra & muonTimeDT() const { return timedt_; }
//  const reco::MuonTimeExtra & muonTimeCSC() const { return timecsc_; }

  float innerPositionX, innerPositionY, innerPositionZ;
  float outerPositionX, outerPositionY, outerPositionZ;
};

#endif
