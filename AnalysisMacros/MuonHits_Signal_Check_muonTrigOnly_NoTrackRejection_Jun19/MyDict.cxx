//
// File generated by rootcint at Wed Jun  4 10:54:26 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MyDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MyDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::MuonTime MuonTime;
      #else
      class MuonTime  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::MuonTime::Direction Direction;
         #else
         enum Direction  {
         };
         #endif

         int nDof; //
         float inverseBeta; //
         float inverseBetaErr; //
         float freeInverseBeta; //
         float freeInverseBetaErr; //
         float timeAtIpInOut; //
         float timeAtIpInOutErr; //
         float timeAtIpOutIn; //
         float timeAtIpOutInErr; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MuonTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void MuonTime_Dictionary();
   static void *new_MuonTime(void *p = 0);
   static void *newArray_MuonTime(Long_t size, void *p);
   static void delete_MuonTime(void *p);
   static void deleteArray_MuonTime(void *p);
   static void destruct_MuonTime(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MuonTime*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::MuonTime) == sizeof(::ROOT::Shadow::MuonTime));
      ::MuonTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::MuonTime),0);
      static ::ROOT::TGenericClassInfo 
         instance("MuonTime", "/uscms_data/d3/msolmaz/myworkingspace/phys_698_spring_2014/CMSSW_5_3_8/src/TreeProducer/TreeProducer/interface/MuonTime.h", 5,
                  typeid(::MuonTime), DefineBehavior(ptr, ptr),
                  &MuonTime_ShowMembers, &MuonTime_Dictionary, isa_proxy, 4,
                  sizeof(::MuonTime) );
      instance.SetNew(&new_MuonTime);
      instance.SetNewArray(&newArray_MuonTime);
      instance.SetDelete(&delete_MuonTime);
      instance.SetDeleteArray(&deleteArray_MuonTime);
      instance.SetDestructor(&destruct_MuonTime);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MuonTime*)
   {
      return GenerateInitInstanceLocal((::MuonTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MuonTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void MuonTime_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::MuonTime*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TreeLepton_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TreeLepton(void *p = 0);
   static void *newArray_TreeLepton(Long_t size, void *p);
   static void delete_TreeLepton(void *p);
   static void deleteArray_TreeLepton(void *p);
   static void destruct_TreeLepton(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeLepton*)
   {
      ::TreeLepton *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TreeLepton >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeLepton", ::TreeLepton::Class_Version(), "/uscms_data/d3/msolmaz/myworkingspace/phys_698_spring_2014/CMSSW_5_3_8/src/TreeProducer/TreeProducer/interface/TreeLepton.h", 7,
                  typeid(::TreeLepton), DefineBehavior(ptr, ptr),
                  &::TreeLepton::Dictionary, isa_proxy, 4,
                  sizeof(::TreeLepton) );
      instance.SetNew(&new_TreeLepton);
      instance.SetNewArray(&newArray_TreeLepton);
      instance.SetDelete(&delete_TreeLepton);
      instance.SetDeleteArray(&deleteArray_TreeLepton);
      instance.SetDestructor(&destruct_TreeLepton);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreeLepton*)
   {
      return GenerateInitInstanceLocal((::TreeLepton*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeLepton*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TreeDipseudoLeptonCandidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TreeDipseudoLeptonCandidate(void *p = 0);
   static void *newArray_TreeDipseudoLeptonCandidate(Long_t size, void *p);
   static void delete_TreeDipseudoLeptonCandidate(void *p);
   static void deleteArray_TreeDipseudoLeptonCandidate(void *p);
   static void destruct_TreeDipseudoLeptonCandidate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeDipseudoLeptonCandidate*)
   {
      ::TreeDipseudoLeptonCandidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TreeDipseudoLeptonCandidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeDipseudoLeptonCandidate", ::TreeDipseudoLeptonCandidate::Class_Version(), "/uscms_data/d3/msolmaz/myworkingspace/phys_698_spring_2014/CMSSW_5_3_8/src/TreeProducer/TreeProducer/interface/TreeDipseudoLeptonCandidate.h", 8,
                  typeid(::TreeDipseudoLeptonCandidate), DefineBehavior(ptr, ptr),
                  &::TreeDipseudoLeptonCandidate::Dictionary, isa_proxy, 4,
                  sizeof(::TreeDipseudoLeptonCandidate) );
      instance.SetNew(&new_TreeDipseudoLeptonCandidate);
      instance.SetNewArray(&newArray_TreeDipseudoLeptonCandidate);
      instance.SetDelete(&delete_TreeDipseudoLeptonCandidate);
      instance.SetDeleteArray(&deleteArray_TreeDipseudoLeptonCandidate);
      instance.SetDestructor(&destruct_TreeDipseudoLeptonCandidate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreeDipseudoLeptonCandidate*)
   {
      return GenerateInitInstanceLocal((::TreeDipseudoLeptonCandidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeDipseudoLeptonCandidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TreePhoton_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TreePhoton(void *p = 0);
   static void *newArray_TreePhoton(Long_t size, void *p);
   static void delete_TreePhoton(void *p);
   static void deleteArray_TreePhoton(void *p);
   static void destruct_TreePhoton(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreePhoton*)
   {
      ::TreePhoton *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TreePhoton >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TreePhoton", ::TreePhoton::Class_Version(), "/uscms_data/d3/msolmaz/myworkingspace/phys_698_spring_2014/CMSSW_5_3_8/src/TreeProducer/TreeProducer/interface/TreePhoton.h", 5,
                  typeid(::TreePhoton), DefineBehavior(ptr, ptr),
                  &::TreePhoton::Dictionary, isa_proxy, 4,
                  sizeof(::TreePhoton) );
      instance.SetNew(&new_TreePhoton);
      instance.SetNewArray(&newArray_TreePhoton);
      instance.SetDelete(&delete_TreePhoton);
      instance.SetDeleteArray(&deleteArray_TreePhoton);
      instance.SetDestructor(&destruct_TreePhoton);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreePhoton*)
   {
      return GenerateInitInstanceLocal((::TreePhoton*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreePhoton*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TreeDiphotonCandidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TreeDiphotonCandidate(void *p = 0);
   static void *newArray_TreeDiphotonCandidate(Long_t size, void *p);
   static void delete_TreeDiphotonCandidate(void *p);
   static void deleteArray_TreeDiphotonCandidate(void *p);
   static void destruct_TreeDiphotonCandidate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeDiphotonCandidate*)
   {
      ::TreeDiphotonCandidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TreeDiphotonCandidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeDiphotonCandidate", ::TreeDiphotonCandidate::Class_Version(), "/uscms_data/d3/msolmaz/myworkingspace/phys_698_spring_2014/CMSSW_5_3_8/src/TreeProducer/TreeProducer/interface/TreeDiphotonCandidate.h", 7,
                  typeid(::TreeDiphotonCandidate), DefineBehavior(ptr, ptr),
                  &::TreeDiphotonCandidate::Dictionary, isa_proxy, 4,
                  sizeof(::TreeDiphotonCandidate) );
      instance.SetNew(&new_TreeDiphotonCandidate);
      instance.SetNewArray(&newArray_TreeDiphotonCandidate);
      instance.SetDelete(&delete_TreeDiphotonCandidate);
      instance.SetDeleteArray(&deleteArray_TreeDiphotonCandidate);
      instance.SetDestructor(&destruct_TreeDiphotonCandidate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreeDiphotonCandidate*)
   {
      return GenerateInitInstanceLocal((::TreeDiphotonCandidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeDiphotonCandidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Candidates_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Candidates(void *p = 0);
   static void *newArray_Candidates(Long_t size, void *p);
   static void delete_Candidates(void *p);
   static void deleteArray_Candidates(void *p);
   static void destruct_Candidates(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Candidates*)
   {
      ::Candidates *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Candidates >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Candidates", ::Candidates::Class_Version(), "./../../TreeProducer/TreeProducer//interface/Candidates.h", 14,
                  typeid(::Candidates), DefineBehavior(ptr, ptr),
                  &::Candidates::Dictionary, isa_proxy, 4,
                  sizeof(::Candidates) );
      instance.SetNew(&new_Candidates);
      instance.SetNewArray(&newArray_Candidates);
      instance.SetDelete(&delete_Candidates);
      instance.SetDeleteArray(&deleteArray_Candidates);
      instance.SetDestructor(&destruct_Candidates);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Candidates*)
   {
      return GenerateInitInstanceLocal((::Candidates*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Candidates*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TreeLepton::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TreeLepton::Class_Name()
{
   return "TreeLepton";
}

//______________________________________________________________________________
const char *TreeLepton::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeLepton*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TreeLepton::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeLepton*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TreeLepton::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeLepton*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TreeLepton::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeLepton*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TreeDipseudoLeptonCandidate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TreeDipseudoLeptonCandidate::Class_Name()
{
   return "TreeDipseudoLeptonCandidate";
}

//______________________________________________________________________________
const char *TreeDipseudoLeptonCandidate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeDipseudoLeptonCandidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TreeDipseudoLeptonCandidate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeDipseudoLeptonCandidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TreeDipseudoLeptonCandidate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeDipseudoLeptonCandidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TreeDipseudoLeptonCandidate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeDipseudoLeptonCandidate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TreePhoton::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TreePhoton::Class_Name()
{
   return "TreePhoton";
}

//______________________________________________________________________________
const char *TreePhoton::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreePhoton*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TreePhoton::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreePhoton*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TreePhoton::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreePhoton*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TreePhoton::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreePhoton*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TreeDiphotonCandidate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TreeDiphotonCandidate::Class_Name()
{
   return "TreeDiphotonCandidate";
}

//______________________________________________________________________________
const char *TreeDiphotonCandidate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeDiphotonCandidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TreeDiphotonCandidate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeDiphotonCandidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TreeDiphotonCandidate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeDiphotonCandidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TreeDiphotonCandidate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeDiphotonCandidate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Candidates::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Candidates::Class_Name()
{
   return "Candidates";
}

//______________________________________________________________________________
const char *Candidates::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Candidates*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Candidates::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Candidates*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Candidates::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Candidates*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Candidates::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Candidates*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Candidates::Streamer(TBuffer &R__b)
{
   // Stream an object of class Candidates.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Candidates::Class(),this);
   } else {
      R__b.WriteClassBuffer(Candidates::Class(),this);
   }
}

//______________________________________________________________________________
void Candidates::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Candidates.
      TClass *R__cl = ::Candidates::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumi", &lumi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_x", &pv_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_y", &pv_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_z", &pv_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_xError", &pv_xError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_yError", &pv_yError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_zError", &pv_zError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_nTracks", &pv_nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_chi2", &pv_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pv_ndof", &pv_ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bs_x", &bs_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bs_y", &bs_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bs_z", &bs_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numPV", &numPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvtx_m1", &nvtx_m1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvtx_0", &nvtx_0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvtx_p1", &nvtx_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvtx_true", &nvtx_true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res1_PdgId", &res1_PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res1_Pt", &res1_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res1_Pz", &res1_Pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res2_PdgId", &res2_PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res2_Pt", &res2_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res2_Pz", &res2_Pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_motherPdgId", &ll1_motherPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughterPdgId", &ll1_daughterPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_ctau", &ll1_ctau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_pt", &ll1_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_pz", &ll1_pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_E", &ll1_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_Et", &ll1_Et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_decayLength2D", &ll1_decayLength2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_decayLength3D", &ll1_decayLength3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter1_PdgId", &ll1_daughter1_PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter1_Pt", &ll1_daughter1_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter1_Eta", &ll1_daughter1_Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter1_D0", &ll1_daughter1_D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter1_Z0", &ll1_daughter1_Z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter2_PdgId", &ll1_daughter2_PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter2_Pt", &ll1_daughter2_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter2_Eta", &ll1_daughter2_Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter2_D0", &ll1_daughter2_D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll1_daughter2_Z0", &ll1_daughter2_Z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_motherPdgId", &ll2_motherPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughterPdgId", &ll2_daughterPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_ctau", &ll2_ctau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_pt", &ll2_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_pz", &ll2_pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_E", &ll2_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_Et", &ll2_Et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_decayLength2D", &ll2_decayLength2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_decayLength3D", &ll2_decayLength3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter1_PdgId", &ll2_daughter1_PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter1_Pt", &ll2_daughter1_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter1_Eta", &ll2_daughter1_Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter1_D0", &ll2_daughter1_D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter1_Z0", &ll2_daughter1_Z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter2_PdgId", &ll2_daughter2_PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter2_Pt", &ll2_daughter2_Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter2_Eta", &ll2_daughter2_Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter2_D0", &ll2_daughter2_D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll2_daughter2_Z0", &ll2_daughter2_Z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MET", &MET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "METPhi", &METPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptons_", (void*)&leptons_);
      R__insp.InspectMember("vector<TreeLepton>", (void*)&leptons_, "leptons_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "candidates_", (void*)&candidates_);
      R__insp.InspectMember("vector<TreeDipseudoLeptonCandidate>", (void*)&candidates_, "candidates_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "candidatesCorrectedTipLip_", (void*)&candidatesCorrectedTipLip_);
      R__insp.InspectMember("vector<TreeDipseudoLeptonCandidate>", (void*)&candidatesCorrectedTipLip_, "candidatesCorrectedTipLip_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photons_", (void*)&photons_);
      R__insp.InspectMember("vector<TreePhoton>", (void*)&photons_, "photons_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diphotonCandidates_", (void*)&diphotonCandidates_);
      R__insp.InspectMember("vector<TreeDiphotonCandidate>", (void*)&diphotonCandidates_, "diphotonCandidates_.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Candidates(void *p) {
      return  p ? new(p) ::Candidates : new ::Candidates;
   }
   static void *newArray_Candidates(Long_t nElements, void *p) {
      return p ? new(p) ::Candidates[nElements] : new ::Candidates[nElements];
   }
   // Wrapper around operator delete
   static void delete_Candidates(void *p) {
      delete ((::Candidates*)p);
   }
   static void deleteArray_Candidates(void *p) {
      delete [] ((::Candidates*)p);
   }
   static void destruct_Candidates(void *p) {
      typedef ::Candidates current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Candidates

//______________________________________________________________________________
void TreeLepton::Streamer(TBuffer &R__b)
{
   // Stream an object of class TreeLepton.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TreeLepton::Class(),this);
   } else {
      R__b.WriteClassBuffer(TreeLepton::Class(),this);
   }
}

//______________________________________________________________________________
void TreeLepton::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TreeLepton.
      TClass *R__cl = ::TreeLepton::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validTrack", &validTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "algo", &algo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackChi2", &trackChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers", &nLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers3D", &nLayers3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tip", &tip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lip", &lip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "highPurity", &highPurity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0_BS", &d0_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0Significance_BS", &d0Significance_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0_PV", &d0_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0Significance_PV", &d0Significance_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0Significance_PV_includingPVError", &d0Significance_PV_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz_PV", &dz_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzsignificance_PV", &dzsignificance_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d03D_PV", &d03D_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d03DSignificance_PV_includingPVError", &d03DSignificance_PV_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iso", &iso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasCaloMatch", &hasCaloMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cmDeltaR", &cmDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cmDeltaEta", &cmDeltaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cmDeltaPhi", &cmDeltaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEnergy", &scEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEt", &scEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEta", &scEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhi", &scPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cmDeltaR_old", &cmDeltaR_old);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "differentSCToOldMethod", &differentSCToOldMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPhotonMatch", &hasPhotonMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pmDeltaR", &pmDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEnergy", &photonEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sameSCAsMatched", &sameSCAsMatched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonSCEnergy", &photonSCEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonSCEt", &photonSCEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEt", &photonEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonEta", &photonEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonPhi", &photonPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonHadronicOverEm", &photonHadronicOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonHadTowOverEm", &photonHadTowOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonSigmaIetaIeta", &photonSigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photonR9", &photonR9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isStandAloneMuon", &isStandAloneMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGlobalMuon", &isGlobalMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTrackerMuon", &isTrackerMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCentralTrack", &isCentralTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isLooseMuon", &isLooseMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerMatch", &triggerMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerObjectIndex", &triggerObjectIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmDeltaR", &tmDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmDeltaR_OLD", &tmDeltaR_OLD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pseudoLeptonIndex", &pseudoLeptonIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genIndex", &genIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genPdgId", &genPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genPt", &genPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genVertexX", &genVertexX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genVertexY", &genVertexY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genVertexZ", &genVertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genPhi", &genPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genEta", &genEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genTheta", &genTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genD0", &genD0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genSignalOriginPdgId", &genSignalOriginPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genSignalOriginCtau", &genSignalOriginCtau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genSignalOriginLxy", &genSignalOriginLxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtStationsWithValidHits", &dtStationsWithValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cscStationsWithValidHits", &cscStationsWithValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtStationsWithAnyHits", &dtStationsWithAnyHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cscStationsWithAnyHits", &cscStationsWithAnyHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonStationsWithAnyHits", &muonStationsWithAnyHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfHits", &numberOfHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidHits", &numberOfValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidMuonCSCHits", &numberOfValidMuonCSCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidMuonDTHits", &numberOfValidMuonDTHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfValidMuonHits", &numberOfValidMuonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfLostHits", &numberOfLostHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfLostMuonCSCHits", &numberOfLostMuonCSCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfLostMuonDTHits", &numberOfLostMuonDTHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfLostMuonHits", &numberOfLostMuonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_1", &minMatchedDeltaR_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_2", &minMatchedDeltaR_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_3", &minMatchedDeltaR_3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_4", &minMatchedDeltaR_4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_5", &minMatchedDeltaR_5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_10", &minMatchedDeltaR_10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_15", &minMatchedDeltaR_15);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_20", &minMatchedDeltaR_20);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedDeltaR_26", &minMatchedDeltaR_26);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_1", &minMatchedGBDeltaR_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_2", &minMatchedGBDeltaR_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_3", &minMatchedGBDeltaR_3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_4", &minMatchedGBDeltaR_4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_5", &minMatchedGBDeltaR_5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_10", &minMatchedGBDeltaR_10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_15", &minMatchedGBDeltaR_15);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_20", &minMatchedGBDeltaR_20);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minMatchedGBDeltaR_26", &minMatchedGBDeltaR_26);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonTime", (void*)&muonTime);
      R__insp.InspectMember("MuonTime", (void*)&muonTime, "muonTime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonTimeC", (void*)&muonTimeC);
      R__insp.InspectMember("MuonTime", (void*)&muonTimeC, "muonTimeC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonTimeDT", (void*)&muonTimeDT);
      R__insp.InspectMember("MuonTime", (void*)&muonTimeDT, "muonTimeDT.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonTimeCSC", (void*)&muonTimeCSC);
      R__insp.InspectMember("MuonTime", (void*)&muonTimeCSC, "muonTimeCSC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emMax", &emMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecal_time", &ecal_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecal_timeErr", &ecal_timeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadMax", &hadMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcal_time", &hcal_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcal_timeErr", &hcal_timeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emErr", &emErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadErr", &hadErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDxIn", &minDxIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDyIn", &minDyIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDxOut", &minDxOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDyOut", &minDyOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDzIn", &minDzIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDzOut", &minDzOut);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreeLepton(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeLepton : new ::TreeLepton;
   }
   static void *newArray_TreeLepton(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeLepton[nElements] : new ::TreeLepton[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeLepton(void *p) {
      delete ((::TreeLepton*)p);
   }
   static void deleteArray_TreeLepton(void *p) {
      delete [] ((::TreeLepton*)p);
   }
   static void destruct_TreeLepton(void *p) {
      typedef ::TreeLepton current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreeLepton

//______________________________________________________________________________
namespace ROOT {
   void MuonTime_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class MuonTime.
      typedef ::ROOT::Shadow::MuonTime ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::MuonTime*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDof", &sobj->nDof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inverseBeta", &sobj->inverseBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inverseBetaErr", &sobj->inverseBetaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "freeInverseBeta", &sobj->freeInverseBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "freeInverseBetaErr", &sobj->freeInverseBetaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIpInOut", &sobj->timeAtIpInOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIpInOutErr", &sobj->timeAtIpInOutErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIpOutIn", &sobj->timeAtIpOutIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeAtIpOutInErr", &sobj->timeAtIpOutInErr);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MuonTime(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MuonTime : new ::MuonTime;
   }
   static void *newArray_MuonTime(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MuonTime[nElements] : new ::MuonTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MuonTime(void *p) {
      delete ((::MuonTime*)p);
   }
   static void deleteArray_MuonTime(void *p) {
      delete [] ((::MuonTime*)p);
   }
   static void destruct_MuonTime(void *p) {
      typedef ::MuonTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MuonTime

//______________________________________________________________________________
void TreeDipseudoLeptonCandidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class TreeDipseudoLeptonCandidate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TreeDipseudoLeptonCandidate::Class(),this);
   } else {
      R__b.WriteClassBuffer(TreeDipseudoLeptonCandidate::Class(),this);
   }
}

//______________________________________________________________________________
void TreeDipseudoLeptonCandidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TreeDipseudoLeptonCandidate.
      TClass *R__cl = ::TreeDipseudoLeptonCandidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonPtL", &leptonPtL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonPtH", &leptonPtH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonEtaL", &leptonEtaL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonEtaH", &leptonEtaH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonChargeL", &leptonChargeL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonChargeH", &leptonChargeH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndexL", &leptonIndexL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIndexH", &leptonIndexH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0L_BS", &leptonD0L_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0H_BS", &leptonD0H_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceL_BS", &leptonD0SignificanceL_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceH_BS", &leptonD0SignificanceH_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0L_PV", &leptonD0L_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0H_PV", &leptonD0H_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceL_PV_includingPVError", &leptonD0SignificanceL_PV_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceH_PV_includingPVError", &leptonD0SignificanceH_PV_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0L_PVrefit", &leptonD0L_PVrefit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0H_PVrefit", &leptonD0H_PVrefit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceL_PVrefit_includingPVError", &leptonD0SignificanceL_PVrefit_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceH_PVrefit_includingPVError", &leptonD0SignificanceH_PVrefit_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0L_PVrefit_sigWrtPerpDilepton", &leptonD0L_PVrefit_sigWrtPerpDilepton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0H_PVrefit_sigWrtPerpDilepton", &leptonD0H_PVrefit_sigWrtPerpDilepton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceL_PVrefit_sigWrtPerpDilepton_includingPVError", &leptonD0SignificanceL_PVrefit_sigWrtPerpDilepton_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceH_PVrefit_sigWrtPerpDilepton_includingPVError", &leptonD0SignificanceH_PVrefit_sigWrtPerpDilepton_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0L_PVrefit_signWrtX", &leptonD0L_PVrefit_signWrtX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0H_PVrefit_signWrtX", &leptonD0H_PVrefit_signWrtX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceL_PVrefit_signWrtX_includingPVError", &leptonD0SignificanceL_PVrefit_signWrtX_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceH_PVrefit_signWrtX_includingPVError", &leptonD0SignificanceH_PVrefit_signWrtX_includingPVError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0L_PVrefit_signWrtPerp", &leptonD0L_PVrefit_signWrtPerp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0H_PVrefit_signWrtPerp", &leptonD0H_PVrefit_signWrtPerp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceL_PVrefit_includingPVError_signWrtPerp", &leptonD0SignificanceL_PVrefit_includingPVError_signWrtPerp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonD0SignificanceH_PVrefit_includingPVError_signWrtPerp", &leptonD0SignificanceH_PVrefit_includingPVError_signWrtPerp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momPhi", &momPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirPhiL", &dirPhiL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirPhiH", &dirPhiH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiL", &deltaPhiL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhiH", &deltaPhiH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonZ0L_PVRefit", &leptonZ0L_PVRefit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonZ0H_PVRefit", &leptonZ0H_PVRefit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_x", &pvRefit_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_y", &pvRefit_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_z", &pvRefit_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_xError", &pvRefit_xError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_yError", &pvRefit_yError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_zError", &pvRefit_zError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_nTracks", &pvRefit_nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_chi2", &pvRefit_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvRefit_ndof", &pvRefit_ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIsoL", &leptonIsoL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIsoH", &leptonIsoH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIsoL4", &leptonIsoL4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIsoH4", &leptonIsoH4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIsoL5", &leptonIsoL5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leptonIsoH5", &leptonIsoH5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosine", &cosine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaR", &deltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosThetaStar", &cosThetaStar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "differentTO", &differentTO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrDileptonMass", &corrDileptonMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caloCorrMass", &caloCorrMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleCorrMass", &scaleCorrMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transverseMass", &transverseMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptCorr", &ptCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaCorr", &etaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiCorr", &phiCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptCaloCorr", &ptCaloCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaCaloCorr", &etaCaloCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiCaloCorr", &phiCaloCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayLength_PV", &decayLength_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayLengthSignificance_PV", &decayLengthSignificance_PV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayLength_BS", &decayLength_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayLengthSignificance_BS", &decayLengthSignificance_BS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhi", &dPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiCorr", &dPhiCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiCorrSigned", &dPhiCorrSigned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiTriggerCorr", &dPhiTriggerCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiCaloCorr", &dPhiCaloCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitsBeforeVertexL", &hitsBeforeVertexL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitsBeforeVertexH", &hitsBeforeVertexH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "missedLayersAfterVertexL", &missedLayersAfterVertexL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "missedLayersAfterVertexH", &missedLayersAfterVertexH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "originPdgIdL", &originPdgIdL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "originPdgIdH", &originPdgIdH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgIdL", &pdgIdL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgIdH", &pdgIdH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genctau", &genctau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genDecayLength2D", &genDecayLength2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genDecayLength3D", &genDecayLength3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validVertex", &validVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexChi2", &vertexChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tkMatches", (void*)&tkMatches);
      R__insp.InspectMember("vector<std::pair<Int_t,Float_t> >", (void*)&tkMatches, "tkMatches.", false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreeDipseudoLeptonCandidate(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeDipseudoLeptonCandidate : new ::TreeDipseudoLeptonCandidate;
   }
   static void *newArray_TreeDipseudoLeptonCandidate(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeDipseudoLeptonCandidate[nElements] : new ::TreeDipseudoLeptonCandidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeDipseudoLeptonCandidate(void *p) {
      delete ((::TreeDipseudoLeptonCandidate*)p);
   }
   static void deleteArray_TreeDipseudoLeptonCandidate(void *p) {
      delete [] ((::TreeDipseudoLeptonCandidate*)p);
   }
   static void destruct_TreeDipseudoLeptonCandidate(void *p) {
      typedef ::TreeDipseudoLeptonCandidate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreeDipseudoLeptonCandidate

//______________________________________________________________________________
void TreePhoton::Streamer(TBuffer &R__b)
{
   // Stream an object of class TreePhoton.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TreePhoton::Class(),this);
   } else {
      R__b.WriteClassBuffer(TreePhoton::Class(),this);
   }
}

//______________________________________________________________________________
void TreePhoton::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TreePhoton.
      TClass *R__cl = ::TreePhoton::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "et", &et);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreePhoton(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreePhoton : new ::TreePhoton;
   }
   static void *newArray_TreePhoton(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreePhoton[nElements] : new ::TreePhoton[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreePhoton(void *p) {
      delete ((::TreePhoton*)p);
   }
   static void deleteArray_TreePhoton(void *p) {
      delete [] ((::TreePhoton*)p);
   }
   static void destruct_TreePhoton(void *p) {
      typedef ::TreePhoton current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreePhoton

//______________________________________________________________________________
void TreeDiphotonCandidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class TreeDiphotonCandidate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TreeDiphotonCandidate::Class(),this);
   } else {
      R__b.WriteClassBuffer(TreeDiphotonCandidate::Class(),this);
   }
}

//______________________________________________________________________________
void TreeDiphotonCandidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TreeDiphotonCandidate.
      TClass *R__cl = ::TreeDiphotonCandidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex_x", &vertex_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex_y", &vertex_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex_z", &vertex_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decayLength", &decayLength);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreeDiphotonCandidate(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeDiphotonCandidate : new ::TreeDiphotonCandidate;
   }
   static void *newArray_TreeDiphotonCandidate(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeDiphotonCandidate[nElements] : new ::TreeDiphotonCandidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeDiphotonCandidate(void *p) {
      delete ((::TreeDiphotonCandidate*)p);
   }
   static void deleteArray_TreeDiphotonCandidate(void *p) {
      delete [] ((::TreeDiphotonCandidate*)p);
   }
   static void destruct_TreeDiphotonCandidate(void *p) {
      typedef ::TreeDiphotonCandidate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreeDiphotonCandidate

namespace ROOT {
   void vectorlETreeDiphotonCandidategR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETreeDiphotonCandidategR_Dictionary();
   static void *new_vectorlETreeDiphotonCandidategR(void *p = 0);
   static void *newArray_vectorlETreeDiphotonCandidategR(Long_t size, void *p);
   static void delete_vectorlETreeDiphotonCandidategR(void *p);
   static void deleteArray_vectorlETreeDiphotonCandidategR(void *p);
   static void destruct_vectorlETreeDiphotonCandidategR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TreeDiphotonCandidate>*)
   {
      vector<TreeDiphotonCandidate> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TreeDiphotonCandidate>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TreeDiphotonCandidate>", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TreeDiphotonCandidate>), DefineBehavior(ptr, ptr),
                  0, &vectorlETreeDiphotonCandidategR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TreeDiphotonCandidate>) );
      instance.SetNew(&new_vectorlETreeDiphotonCandidategR);
      instance.SetNewArray(&newArray_vectorlETreeDiphotonCandidategR);
      instance.SetDelete(&delete_vectorlETreeDiphotonCandidategR);
      instance.SetDeleteArray(&deleteArray_vectorlETreeDiphotonCandidategR);
      instance.SetDestructor(&destruct_vectorlETreeDiphotonCandidategR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TreeDiphotonCandidate> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TreeDiphotonCandidate>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETreeDiphotonCandidategR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TreeDiphotonCandidate>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETreeDiphotonCandidategR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreeDiphotonCandidate> : new vector<TreeDiphotonCandidate>;
   }
   static void *newArray_vectorlETreeDiphotonCandidategR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreeDiphotonCandidate>[nElements] : new vector<TreeDiphotonCandidate>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETreeDiphotonCandidategR(void *p) {
      delete ((vector<TreeDiphotonCandidate>*)p);
   }
   static void deleteArray_vectorlETreeDiphotonCandidategR(void *p) {
      delete [] ((vector<TreeDiphotonCandidate>*)p);
   }
   static void destruct_vectorlETreeDiphotonCandidategR(void *p) {
      typedef vector<TreeDiphotonCandidate> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TreeDiphotonCandidate>

namespace ROOT {
   void vectorlETreeDipseudoLeptonCandidategR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETreeDipseudoLeptonCandidategR_Dictionary();
   static void *new_vectorlETreeDipseudoLeptonCandidategR(void *p = 0);
   static void *newArray_vectorlETreeDipseudoLeptonCandidategR(Long_t size, void *p);
   static void delete_vectorlETreeDipseudoLeptonCandidategR(void *p);
   static void deleteArray_vectorlETreeDipseudoLeptonCandidategR(void *p);
   static void destruct_vectorlETreeDipseudoLeptonCandidategR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TreeDipseudoLeptonCandidate>*)
   {
      vector<TreeDipseudoLeptonCandidate> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TreeDipseudoLeptonCandidate>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TreeDipseudoLeptonCandidate>", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TreeDipseudoLeptonCandidate>), DefineBehavior(ptr, ptr),
                  0, &vectorlETreeDipseudoLeptonCandidategR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TreeDipseudoLeptonCandidate>) );
      instance.SetNew(&new_vectorlETreeDipseudoLeptonCandidategR);
      instance.SetNewArray(&newArray_vectorlETreeDipseudoLeptonCandidategR);
      instance.SetDelete(&delete_vectorlETreeDipseudoLeptonCandidategR);
      instance.SetDeleteArray(&deleteArray_vectorlETreeDipseudoLeptonCandidategR);
      instance.SetDestructor(&destruct_vectorlETreeDipseudoLeptonCandidategR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TreeDipseudoLeptonCandidate> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TreeDipseudoLeptonCandidate>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETreeDipseudoLeptonCandidategR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TreeDipseudoLeptonCandidate>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETreeDipseudoLeptonCandidategR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreeDipseudoLeptonCandidate> : new vector<TreeDipseudoLeptonCandidate>;
   }
   static void *newArray_vectorlETreeDipseudoLeptonCandidategR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreeDipseudoLeptonCandidate>[nElements] : new vector<TreeDipseudoLeptonCandidate>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETreeDipseudoLeptonCandidategR(void *p) {
      delete ((vector<TreeDipseudoLeptonCandidate>*)p);
   }
   static void deleteArray_vectorlETreeDipseudoLeptonCandidategR(void *p) {
      delete [] ((vector<TreeDipseudoLeptonCandidate>*)p);
   }
   static void destruct_vectorlETreeDipseudoLeptonCandidategR(void *p) {
      typedef vector<TreeDipseudoLeptonCandidate> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TreeDipseudoLeptonCandidate>

namespace ROOT {
   void vectorlETreeLeptongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETreeLeptongR_Dictionary();
   static void *new_vectorlETreeLeptongR(void *p = 0);
   static void *newArray_vectorlETreeLeptongR(Long_t size, void *p);
   static void delete_vectorlETreeLeptongR(void *p);
   static void deleteArray_vectorlETreeLeptongR(void *p);
   static void destruct_vectorlETreeLeptongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TreeLepton>*)
   {
      vector<TreeLepton> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TreeLepton>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TreeLepton>", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TreeLepton>), DefineBehavior(ptr, ptr),
                  0, &vectorlETreeLeptongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TreeLepton>) );
      instance.SetNew(&new_vectorlETreeLeptongR);
      instance.SetNewArray(&newArray_vectorlETreeLeptongR);
      instance.SetDelete(&delete_vectorlETreeLeptongR);
      instance.SetDeleteArray(&deleteArray_vectorlETreeLeptongR);
      instance.SetDestructor(&destruct_vectorlETreeLeptongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TreeLepton> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TreeLepton>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETreeLeptongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TreeLepton>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETreeLeptongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreeLepton> : new vector<TreeLepton>;
   }
   static void *newArray_vectorlETreeLeptongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreeLepton>[nElements] : new vector<TreeLepton>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETreeLeptongR(void *p) {
      delete ((vector<TreeLepton>*)p);
   }
   static void deleteArray_vectorlETreeLeptongR(void *p) {
      delete [] ((vector<TreeLepton>*)p);
   }
   static void destruct_vectorlETreeLeptongR(void *p) {
      typedef vector<TreeLepton> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TreeLepton>

namespace ROOT {
   void vectorlETreePhotongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETreePhotongR_Dictionary();
   static void *new_vectorlETreePhotongR(void *p = 0);
   static void *newArray_vectorlETreePhotongR(Long_t size, void *p);
   static void delete_vectorlETreePhotongR(void *p);
   static void deleteArray_vectorlETreePhotongR(void *p);
   static void destruct_vectorlETreePhotongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TreePhoton>*)
   {
      vector<TreePhoton> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TreePhoton>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TreePhoton>", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TreePhoton>), DefineBehavior(ptr, ptr),
                  0, &vectorlETreePhotongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TreePhoton>) );
      instance.SetNew(&new_vectorlETreePhotongR);
      instance.SetNewArray(&newArray_vectorlETreePhotongR);
      instance.SetDelete(&delete_vectorlETreePhotongR);
      instance.SetDeleteArray(&deleteArray_vectorlETreePhotongR);
      instance.SetDestructor(&destruct_vectorlETreePhotongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TreePhoton> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TreePhoton>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETreePhotongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TreePhoton>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETreePhotongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreePhoton> : new vector<TreePhoton>;
   }
   static void *newArray_vectorlETreePhotongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TreePhoton>[nElements] : new vector<TreePhoton>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETreePhotongR(void *p) {
      delete ((vector<TreePhoton>*)p);
   }
   static void deleteArray_vectorlETreePhotongR(void *p) {
      delete [] ((vector<TreePhoton>*)p);
   }
   static void destruct_vectorlETreePhotongR(void *p) {
      typedef vector<TreePhoton> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TreePhoton>

namespace ROOT {
   void vectorlEpairlEintcOfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEintcOfloatgRsPgR_Dictionary();
   static void *new_vectorlEpairlEintcOfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEintcOfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEintcOfloatgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEintcOfloatgRsPgR(void *p);
   static void destruct_vectorlEpairlEintcOfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<int,float> >*)
   {
      vector<pair<int,float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<int,float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<int,float> >", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<pair<int,float> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEintcOfloatgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<int,float> >) );
      instance.SetNew(&new_vectorlEpairlEintcOfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEintcOfloatgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEintcOfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEintcOfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEintcOfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pair<int,float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<int,float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEintcOfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pair<int,float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpairlEintcOfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<int,float> > : new vector<pair<int,float> >;
   }
   static void *newArray_vectorlEpairlEintcOfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<int,float> >[nElements] : new vector<pair<int,float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEintcOfloatgRsPgR(void *p) {
      delete ((vector<pair<int,float> >*)p);
   }
   static void deleteArray_vectorlEpairlEintcOfloatgRsPgR(void *p) {
      delete [] ((vector<pair<int,float> >*)p);
   }
   static void destruct_vectorlEpairlEintcOfloatgRsPgR(void *p) {
      typedef vector<pair<int,float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pair<int,float> >

/********************************************************
* MyDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMyDict();

extern "C" void G__set_cpp_environmentMyDict() {
  G__cpp_reset_tagtableMyDict();
}
#include <new>
extern "C" int G__cpp_dllrevMyDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MuonTime */
static int G__MyDict_219_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonTime[n];
     } else {
       p = new((void*) gvp) MuonTime[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonTime;
     } else {
       p = new((void*) gvp) MuonTime;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_MuonTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MuonTime*) G__getstructoffset())->direction());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MuonTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MuonTime(*(MuonTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_MuonTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MuonTime G__TMuonTime;
static int G__MyDict_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MuonTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MuonTime*) (soff+(sizeof(MuonTime)*i)))->~G__TMuonTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MuonTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MuonTime*) (soff))->~G__TMuonTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_219_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonTime* dest = (MuonTime*) G__getstructoffset();
   *dest = *(MuonTime*) libp->para[0].ref;
   const MuonTime& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeLepton */
static int G__MyDict_221_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeLepton* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeLepton[n];
     } else {
       p = new((void*) gvp) TreeLepton[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeLepton;
     } else {
       p = new((void*) gvp) TreeLepton;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreeLepton));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TreeLepton::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeLepton::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TreeLepton::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TreeLepton::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TreeLepton*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeLepton*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeLepton*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeLepton*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeLepton::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeLepton::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeLepton::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_221_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeLepton::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeLepton* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeLepton(*(TreeLepton*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreeLepton));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeLepton G__TTreeLepton;
static int G__MyDict_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeLepton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeLepton*) (soff+(sizeof(TreeLepton)*i)))->~G__TTreeLepton();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeLepton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeLepton*) (soff))->~G__TTreeLepton();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeLepton* dest = (TreeLepton*) G__getstructoffset();
   *dest = *(TreeLepton*) libp->para[0].ref;
   const TreeLepton& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeDipseudoLeptonCandidate */
static int G__MyDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeDipseudoLeptonCandidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeDipseudoLeptonCandidate[n];
     } else {
       p = new((void*) gvp) TreeDipseudoLeptonCandidate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeDipseudoLeptonCandidate;
     } else {
       p = new((void*) gvp) TreeDipseudoLeptonCandidate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TreeDipseudoLeptonCandidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeDipseudoLeptonCandidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TreeDipseudoLeptonCandidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TreeDipseudoLeptonCandidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TreeDipseudoLeptonCandidate*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeDipseudoLeptonCandidate*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeDipseudoLeptonCandidate*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeDipseudoLeptonCandidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeDipseudoLeptonCandidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeDipseudoLeptonCandidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeDipseudoLeptonCandidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeDipseudoLeptonCandidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeDipseudoLeptonCandidate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeDipseudoLeptonCandidate(*(TreeDipseudoLeptonCandidate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeDipseudoLeptonCandidate G__TTreeDipseudoLeptonCandidate;
static int G__MyDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeDipseudoLeptonCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeDipseudoLeptonCandidate*) (soff+(sizeof(TreeDipseudoLeptonCandidate)*i)))->~G__TTreeDipseudoLeptonCandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeDipseudoLeptonCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeDipseudoLeptonCandidate*) (soff))->~G__TTreeDipseudoLeptonCandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeDipseudoLeptonCandidate* dest = (TreeDipseudoLeptonCandidate*) G__getstructoffset();
   *dest = *(TreeDipseudoLeptonCandidate*) libp->para[0].ref;
   const TreeDipseudoLeptonCandidate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreePhoton */
static int G__MyDict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreePhoton* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreePhoton[n];
     } else {
       p = new((void*) gvp) TreePhoton[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreePhoton;
     } else {
       p = new((void*) gvp) TreePhoton;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreePhoton));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TreePhoton::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreePhoton::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TreePhoton::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TreePhoton::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TreePhoton*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreePhoton*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreePhoton*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreePhoton*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreePhoton::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreePhoton::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreePhoton::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreePhoton::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreePhoton* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreePhoton(*(TreePhoton*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreePhoton));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreePhoton G__TTreePhoton;
static int G__MyDict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreePhoton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreePhoton*) (soff+(sizeof(TreePhoton)*i)))->~G__TTreePhoton();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreePhoton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreePhoton*) (soff))->~G__TTreePhoton();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreePhoton* dest = (TreePhoton*) G__getstructoffset();
   *dest = *(TreePhoton*) libp->para[0].ref;
   const TreePhoton& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeDiphotonCandidate */
static int G__MyDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeDiphotonCandidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeDiphotonCandidate[n];
     } else {
       p = new((void*) gvp) TreeDiphotonCandidate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeDiphotonCandidate;
     } else {
       p = new((void*) gvp) TreeDiphotonCandidate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TreeDiphotonCandidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeDiphotonCandidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TreeDiphotonCandidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TreeDiphotonCandidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TreeDiphotonCandidate*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeDiphotonCandidate*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeDiphotonCandidate*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeDiphotonCandidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeDiphotonCandidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeDiphotonCandidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeDiphotonCandidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeDiphotonCandidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeDiphotonCandidate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeDiphotonCandidate(*(TreeDiphotonCandidate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeDiphotonCandidate G__TTreeDiphotonCandidate;
static int G__MyDict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeDiphotonCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeDiphotonCandidate*) (soff+(sizeof(TreeDiphotonCandidate)*i)))->~G__TTreeDiphotonCandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeDiphotonCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeDiphotonCandidate*) (soff))->~G__TTreeDiphotonCandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeDiphotonCandidate* dest = (TreeDiphotonCandidate*) G__getstructoffset();
   *dest = *(TreeDiphotonCandidate*) libp->para[0].ref;
   const TreeDiphotonCandidate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Candidates */
static int G__MyDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Candidates* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Candidates[n];
     } else {
       p = new((void*) gvp) Candidates[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Candidates;
     } else {
       p = new((void*) gvp) Candidates;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_Candidates));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidates*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Candidates::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidates::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Candidates::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Candidates::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidates*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidates::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Candidates::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidates::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Candidates::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Candidates* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Candidates(*(Candidates*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_Candidates));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Candidates G__TCandidates;
static int G__MyDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Candidates*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Candidates*) (soff+(sizeof(Candidates)*i)))->~G__TCandidates();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Candidates*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Candidates*) (soff))->~G__TCandidates();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Candidates* dest = (Candidates*) G__getstructoffset();
   *dest = *(Candidates*) libp->para[0].ref;
   const Candidates& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MuonTime */

/* TreeLepton */

/* TreeDipseudoLeptonCandidate */

/* TreePhoton */

/* TreeDiphotonCandidate */

/* Candidates */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMyDict {
 public:
  G__Sizep2memfuncMyDict(): p(&G__Sizep2memfuncMyDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMyDict::*p)();
};

size_t G__get_sizep2memfuncMyDict()
{
  G__Sizep2memfuncMyDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMyDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyDictLN_Candidates))) {
     Candidates *G__Lderived;
     G__Lderived=(Candidates*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyDictLN_Candidates),G__get_linked_tagnum(&G__MyDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMyDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MyDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_pairlEintcOfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<Int_t,Float_t> >",117,G__get_linked_tagnum(&G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,float> >",117,G__get_linked_tagnum(&G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TreeLepton>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreeLeptoncOallocatorlETreeLeptongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreeLeptoncOallocatorlETreeLeptongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TreeDipseudoLeptonCandidate>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TreePhoton>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreePhotoncOallocatorlETreePhotongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreePhotoncOallocatorlETreePhotongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TreeDiphotonCandidate>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MuonTime */
static void G__setup_memvarMuonTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_MuonTime));
   { MuonTime *p; p=(MuonTime*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nDof)-(long)(p)),105,0,0,-1,-1,-1,1,"nDof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inverseBeta)-(long)(p)),102,0,0,-1,-1,-1,1,"inverseBeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inverseBetaErr)-(long)(p)),102,0,0,-1,-1,-1,1,"inverseBetaErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->freeInverseBeta)-(long)(p)),102,0,0,-1,-1,-1,1,"freeInverseBeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->freeInverseBetaErr)-(long)(p)),102,0,0,-1,-1,-1,1,"freeInverseBetaErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIpInOut)-(long)(p)),102,0,0,-1,-1,-1,1,"timeAtIpInOut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIpInOutErr)-(long)(p)),102,0,0,-1,-1,-1,1,"timeAtIpInOutErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIpOutIn)-(long)(p)),102,0,0,-1,-1,-1,1,"timeAtIpOutIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAtIpOutInErr)-(long)(p)),102,0,0,-1,-1,-1,1,"timeAtIpOutInErr=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MyDictLN_MuonTimecLcLDirection),-1,-2,1,G__FastAllocString(4096).Format("OutsideIn=%lldLL",(long long)MuonTime::OutsideIn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MyDictLN_MuonTimecLcLDirection),-1,-2,1,G__FastAllocString(4096).Format("Undefined=%lldLL",(long long)MuonTime::Undefined).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MyDictLN_MuonTimecLcLDirection),-1,-2,1,G__FastAllocString(4096).Format("InsideOut=%lldLL",(long long)MuonTime::InsideOut).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeLepton */
static void G__setup_memvarTreeLepton(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_TreeLepton));
   { TreeLepton *p; p=(TreeLepton*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->validTrack)-(long)(p)),103,0,0,-1,-1,-1,1,"validTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->algo)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"algo=",0,"Which tracking iteration reco'd this track");
   G__memvar_setup((void*)((long)(&p->trackChi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trackChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nLayers)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nLayers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nLayers3D)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nLayers3D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tip)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tip=",0,"As defined in track selectors");
   G__memvar_setup((void*)((long)(&p->lip)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->highPurity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"highPurity=",0,"Is high purity");
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d0_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0Significance_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d0Significance_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d0_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0Significance_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d0Significance_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0Significance_PV_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d0Significance_PV_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dz_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzsignificance_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dzsignificance_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d03D_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d03D_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d03DSignificance_PV_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"d03DSignificance_PV_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iso)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"iso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasCaloMatch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasCaloMatch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cmDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cmDeltaR=",0,"Delta R of pseudolepton to nearest trigger object");
   G__memvar_setup((void*)((long)(&p->cmDeltaEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cmDeltaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cmDeltaPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cmDeltaPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cmDeltaR_old)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cmDeltaR_old=",0,"Comparison with old version");
   G__memvar_setup((void*)((long)(&p->differentSCToOldMethod)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"differentSCToOldMethod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasPhotonMatch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasPhotonMatch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pmDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pmDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sameSCAsMatched)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sameSCAsMatched=",0,"Whether the SC of this photon is the same as the one matched by deltaR");
   G__memvar_setup((void*)((long)(&p->photonSCEnergy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonSCEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonSCEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonSCEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonEt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonHadronicOverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonHadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonHadTowOverEm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonHadTowOverEm=",0,"Different to above https://twiki.cern.ch/twiki/bin/viewauth/CMS/CutBasedPhotonID2012");
   G__memvar_setup((void*)((long)(&p->photonSigmaIetaIeta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonSigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photonR9)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"photonR9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isStandAloneMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isStandAloneMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isGlobalMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isGlobalMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTrackerMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isTrackerMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isCentralTrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isCentralTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isLooseMuon)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isLooseMuon=",0,"Does muon pass loose id described in https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideMuonId");
   G__memvar_setup((void*)((long)(&p->triggerMatch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"triggerMatch=",0,"Info on trigger match if any");
   G__memvar_setup((void*)((long)(&p->triggerObjectIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"triggerObjectIndex=",0,"Index of trigger object match");
   G__memvar_setup((void*)((long)(&p->tmDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tmDeltaR=",0,"Delta R of pseudolepton to nearest trigger object");
   G__memvar_setup((void*)((long)(&p->tmDeltaR_OLD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tmDeltaR_OLD=",0,"Compare with old method");
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pseudoLeptonIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pseudoLeptonIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"genIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genPdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"genPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genVertexX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genVertexX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genVertexY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genVertexY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genVertexZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genVertexZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genTheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genD0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genD0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genSignalOriginPdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"genSignalOriginPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genSignalOriginCtau)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genSignalOriginCtau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genSignalOriginLxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genSignalOriginLxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dtStationsWithValidHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dtStationsWithValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cscStationsWithValidHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cscStationsWithValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dtStationsWithAnyHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dtStationsWithAnyHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cscStationsWithAnyHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cscStationsWithAnyHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonStationsWithAnyHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"muonStationsWithAnyHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidMuonCSCHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidMuonCSCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidMuonDTHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidMuonDTHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfValidMuonHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfValidMuonHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfLostHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfLostHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfLostMuonCSCHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfLostMuonCSCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfLostMuonDTHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfLostMuonDTHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numberOfLostMuonHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numberOfLostMuonHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_1)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_2)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_3)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_4)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_5)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_10)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_15)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_15=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_20)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_20=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedDeltaR_26)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedDeltaR_26=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_1)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_2)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_3)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_4)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_5)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_10)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_15)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_15=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_20)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_20=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minMatchedGBDeltaR_26)-(long)(p)),102,0,0,-1,-1,-1,1,"minMatchedGBDeltaR_26=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_MuonTime),-1,-1,1,"muonTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonTimeC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_MuonTime),-1,-1,1,"muonTimeC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonTimeDT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_MuonTime),-1,-1,1,"muonTimeDT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonTimeCSC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_MuonTime),-1,-1,1,"muonTimeCSC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emMax)-(long)(p)),102,0,0,-1,-1,-1,1,"emMax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecal_time)-(long)(p)),102,0,0,-1,-1,-1,1,"ecal_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecal_timeErr)-(long)(p)),102,0,0,-1,-1,-1,1,"ecal_timeErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadMax)-(long)(p)),102,0,0,-1,-1,-1,1,"hadMax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcal_time)-(long)(p)),102,0,0,-1,-1,-1,1,"hcal_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcal_timeErr)-(long)(p)),102,0,0,-1,-1,-1,1,"hcal_timeErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emErr)-(long)(p)),102,0,0,-1,-1,-1,1,"emErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadErr)-(long)(p)),102,0,0,-1,-1,-1,1,"hadErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minDxIn)-(long)(p)),102,0,0,-1,-1,-1,1,"minDxIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minDyIn)-(long)(p)),102,0,0,-1,-1,-1,1,"minDyIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minDxOut)-(long)(p)),102,0,0,-1,-1,-1,1,"minDxOut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minDyOut)-(long)(p)),102,0,0,-1,-1,-1,1,"minDyOut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minDzIn)-(long)(p)),102,0,0,-1,-1,-1,1,"minDzIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minDzOut)-(long)(p)),102,0,0,-1,-1,-1,1,"minDzOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeDipseudoLeptonCandidate */
static void G__setup_memvarTreeDipseudoLeptonCandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate));
   { TreeDipseudoLeptonCandidate *p; p=(TreeDipseudoLeptonCandidate*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->leptonPtL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonPtL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonPtH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonPtH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonEtaL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonEtaL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonEtaH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonEtaH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonChargeL)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonChargeL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonChargeH)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonChargeH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIndexL)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndexL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIndexH)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"leptonIndexH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0L_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0L_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0H_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0H_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceL_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceL_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceH_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceH_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0L_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0L_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0H_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0H_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceL_PV_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceL_PV_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceH_PV_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceH_PV_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0L_PVrefit)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0L_PVrefit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0H_PVrefit)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0H_PVrefit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceL_PVrefit_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceL_PVrefit_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceH_PVrefit_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceH_PVrefit_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0L_PVrefit_sigWrtPerpDilepton)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0L_PVrefit_sigWrtPerpDilepton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0H_PVrefit_sigWrtPerpDilepton)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0H_PVrefit_sigWrtPerpDilepton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceL_PVrefit_sigWrtPerpDilepton_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceL_PVrefit_sigWrtPerpDilepton_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceH_PVrefit_sigWrtPerpDilepton_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceH_PVrefit_sigWrtPerpDilepton_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0L_PVrefit_signWrtX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0L_PVrefit_signWrtX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0H_PVrefit_signWrtX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0H_PVrefit_signWrtX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceL_PVrefit_signWrtX_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceL_PVrefit_signWrtX_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceH_PVrefit_signWrtX_includingPVError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceH_PVrefit_signWrtX_includingPVError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0L_PVrefit_signWrtPerp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0L_PVrefit_signWrtPerp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0H_PVrefit_signWrtPerp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0H_PVrefit_signWrtPerp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceL_PVrefit_includingPVError_signWrtPerp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceL_PVrefit_includingPVError_signWrtPerp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonD0SignificanceH_PVrefit_includingPVError_signWrtPerp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonD0SignificanceH_PVrefit_includingPVError_signWrtPerp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->momPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"momPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dirPhiL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dirPhiL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dirPhiH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dirPhiH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaPhiL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhiH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaPhiH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonZ0L_PVRefit)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonZ0L_PVRefit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonZ0H_PVRefit)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonZ0H_PVRefit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_xError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_xError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_yError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_yError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_zError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_zError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_nTracks)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvRefit_ndof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pvRefit_ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIsoL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonIsoL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIsoH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonIsoH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIsoL4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonIsoL4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIsoH4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonIsoH4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIsoL5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonIsoL5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptonIsoH5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"leptonIsoH5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosine)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosine=",0,"to reject cosmics. Leave unbiased by taking the values before refit to vertex");
   G__memvar_setup((void*)((long)(&p->deltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"deltaR=",0,"for trigger inefficiencies. Leave unbiased as above.");
   G__memvar_setup((void*)((long)(&p->cosThetaStar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cosThetaStar=",0,"angle between positive lepton momentum in dilepton rest frame and dilepton momentum");
   G__memvar_setup((void*)((long)(&p->differentTO)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"differentTO=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->corrDileptonMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"corrDileptonMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caloCorrMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"caloCorrMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scaleCorrMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scaleCorrMass=",0,"corrected so that deltaR between vertex flight direction and di-lepton momentum is 0.");
   G__memvar_setup((void*)((long)(&p->transverseMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"transverseMass=",0,"For 3 body decays");
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ptCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"etaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phiCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptCaloCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ptCaloCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaCaloCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"etaCaloCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiCaloCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phiCaloCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayLength_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"decayLength_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayLengthSignificance_PV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"decayLengthSignificance_PV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayLength_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"decayLength_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayLengthSignificance_BS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"decayLengthSignificance_BS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dPhi=",0,"Angle in transverse plane between vertex (secondary-primay) flight direction and di-lepton momentum");
   G__memvar_setup((void*)((long)(&p->dPhiCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dPhiCorr=",0,"Same as above but using leptons refitted to vertex to compute di-lepton momentum");
   G__memvar_setup((void*)((long)(&p->dPhiCorrSigned)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dPhiCorrSigned=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhiTriggerCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dPhiTriggerCorr=",0,"Same as above using trigger matches to compute di-lepton momentum");
   G__memvar_setup((void*)((long)(&p->dPhiCaloCorr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dPhiCaloCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitsBeforeVertexL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hitsBeforeVertexL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitsBeforeVertexH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hitsBeforeVertexH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->missedLayersAfterVertexL)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"missedLayersAfterVertexL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->missedLayersAfterVertexH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"missedLayersAfterVertexH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->originPdgIdL)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"originPdgIdL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->originPdgIdH)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"originPdgIdH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgIdL)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdgIdL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgIdH)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdgIdH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genctau)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genctau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genDecayLength2D)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genDecayLength2D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genDecayLength3D)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"genDecayLength3D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validVertex)-(long)(p)),103,0,0,-1,-1,-1,1,"validVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertexChi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vertexChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tkMatches)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR),G__defined_typename("vector<std::pair<Int_t,Float_t> >"),-1,1,"tkMatches=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreePhoton */
static void G__setup_memvarTreePhoton(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_TreePhoton));
   { TreePhoton *p; p=(TreePhoton*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeDiphotonCandidate */
static void G__setup_memvarTreeDiphotonCandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate));
   { TreeDiphotonCandidate *p; p=(TreeDiphotonCandidate*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertex_x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vertex_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertex_y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vertex_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertex_z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"vertex_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decayLength)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"decayLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Candidates */
static void G__setup_memvarCandidates(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_Candidates));
   { Candidates *p; p=(Candidates*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),104,0,0,-1,-1,-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumi)-(long)(p)),104,0,0,-1,-1,-1,1,"lumi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event)-(long)(p)),104,0,0,-1,-1,-1,1,"event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_xError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_xError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_yError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_yError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_zError)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_zError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_nTracks)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pv_ndof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pv_ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bs_x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bs_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bs_y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bs_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bs_z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bs_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numPV)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numPV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nvtx_m1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nvtx_m1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nvtx_0)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nvtx_0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nvtx_p1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nvtx_p1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nvtx_true)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nvtx_true=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->res1_PdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"res1_PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->res1_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"res1_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->res1_Pz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"res1_Pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->res2_PdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"res2_PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->res2_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"res2_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->res2_Pz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"res2_Pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_motherPdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ll1_motherPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughterPdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ll1_daughterPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_ctau)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_ctau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_pz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_Et)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_Et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_decayLength2D)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_decayLength2D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_decayLength3D)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_decayLength3D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter1_PdgId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter1_PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter1_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter1_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter1_Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter1_Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter1_D0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter1_D0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter1_Z0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter1_Z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter2_PdgId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter2_PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter2_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter2_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter2_Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter2_Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter2_D0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter2_D0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll1_daughter2_Z0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll1_daughter2_Z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_motherPdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ll2_motherPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughterPdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ll2_daughterPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_ctau)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_ctau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_pz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_Et)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_Et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_decayLength2D)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_decayLength2D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_decayLength3D)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_decayLength3D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter1_PdgId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter1_PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter1_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter1_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter1_Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter1_Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter1_D0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter1_D0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter1_Z0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter1_Z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter2_PdgId)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter2_PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter2_Pt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter2_Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter2_Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter2_Eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter2_D0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter2_D0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ll2_daughter2_Z0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll2_daughter2_Z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MET)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->METPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"METPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leptons_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR),G__defined_typename("vector<TreeLepton>"),-1,1,"leptons_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->candidates_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR),G__defined_typename("vector<TreeDipseudoLeptonCandidate>"),-1,1,"candidates_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->candidatesCorrectedTipLip_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR),G__defined_typename("vector<TreeDipseudoLeptonCandidate>"),-1,1,"candidatesCorrectedTipLip_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->photons_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR),G__defined_typename("vector<TreePhoton>"),-1,1,"photons_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diphotonCandidates_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR),G__defined_typename("vector<TreeDiphotonCandidate>"),-1,1,"diphotonCandidates_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMyDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMuonTime(void) {
   /* MuonTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_MuonTime));
   G__memfunc_setup("MuonTime",814,G__MyDict_219_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_MuonTime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("direction",961,G__MyDict_219_0_2, 105, G__get_linked_tagnum(&G__MyDictLN_MuonTimecLcLDirection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MuonTime", 814, G__MyDict_219_0_3, (int) ('i'), G__get_linked_tagnum(&G__MyDictLN_MuonTime), -1, 0, 1, 1, 1, 0, "u 'MuonTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MuonTime", 940, G__MyDict_219_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_219_0_5, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_MuonTime), -1, 1, 1, 1, 1, 0, "u 'MuonTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeLepton(void) {
   /* TreeLepton */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_TreeLepton));
   G__memfunc_setup("TreeLepton",1026,G__MyDict_221_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_TreeLepton), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_221_0_2, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TreeLepton::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_221_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeLepton::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_221_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TreeLepton::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_221_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TreeLepton::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MyDict_221_0_6, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MyDict_221_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MyDict_221_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_221_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_221_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeLepton::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_221_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeLepton::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_221_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeLepton::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_221_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeLepton::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TreeLepton", 1026, G__MyDict_221_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyDictLN_TreeLepton), -1, 0, 1, 1, 1, 0, "u 'TreeLepton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeLepton", 1152, G__MyDict_221_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_221_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_TreeLepton), -1, 1, 1, 1, 1, 0, "u 'TreeLepton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeDipseudoLeptonCandidate(void) {
   /* TreeDipseudoLeptonCandidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate));
   G__memfunc_setup("TreeDipseudoLeptonCandidate",2748,G__MyDict_222_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_222_0_2, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TreeDipseudoLeptonCandidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_222_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeDipseudoLeptonCandidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_222_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TreeDipseudoLeptonCandidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_222_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TreeDipseudoLeptonCandidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MyDict_222_0_6, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MyDict_222_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MyDict_222_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_222_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_222_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeDipseudoLeptonCandidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_222_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeDipseudoLeptonCandidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_222_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeDipseudoLeptonCandidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_222_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeDipseudoLeptonCandidate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TreeDipseudoLeptonCandidate", 2748, G__MyDict_222_0_14, (int) ('i'), 
G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate), -1, 0, 1, 1, 1, 0, "u 'TreeDipseudoLeptonCandidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeDipseudoLeptonCandidate", 2874, G__MyDict_222_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_222_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_TreeDipseudoLeptonCandidate), -1, 1, 1, 1, 1, 0, "u 'TreeDipseudoLeptonCandidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreePhoton(void) {
   /* TreePhoton */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_TreePhoton));
   G__memfunc_setup("TreePhoton",1032,G__MyDict_228_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_TreePhoton), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_228_0_2, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TreePhoton::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_228_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreePhoton::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_228_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TreePhoton::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_228_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TreePhoton::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MyDict_228_0_6, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MyDict_228_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MyDict_228_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_228_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_228_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreePhoton::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_228_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreePhoton::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_228_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreePhoton::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_228_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreePhoton::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TreePhoton", 1032, G__MyDict_228_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyDictLN_TreePhoton), -1, 0, 1, 1, 1, 0, "u 'TreePhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreePhoton", 1158, G__MyDict_228_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_228_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_TreePhoton), -1, 1, 1, 1, 1, 0, "u 'TreePhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeDiphotonCandidate(void) {
   /* TreeDiphotonCandidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate));
   G__memfunc_setup("TreeDiphotonCandidate",2130,G__MyDict_229_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_229_0_2, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TreeDiphotonCandidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_229_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeDiphotonCandidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_229_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TreeDiphotonCandidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_229_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TreeDiphotonCandidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MyDict_229_0_6, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MyDict_229_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MyDict_229_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_229_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_229_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeDiphotonCandidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_229_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeDiphotonCandidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_229_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeDiphotonCandidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_229_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeDiphotonCandidate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TreeDiphotonCandidate", 2130, G__MyDict_229_0_14, (int) ('i'), 
G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate), -1, 0, 1, 1, 1, 0, "u 'TreeDiphotonCandidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeDiphotonCandidate", 2256, G__MyDict_229_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_229_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_TreeDiphotonCandidate), -1, 1, 1, 1, 1, 0, "u 'TreeDiphotonCandidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCandidates(void) {
   /* Candidates */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_Candidates));
   G__memfunc_setup("Candidates",1008,G__MyDict_230_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_Candidates), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyDict_230_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_230_0_3, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Candidates::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_230_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidates::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_230_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Candidates::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_230_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Candidates::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_230_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_230_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidates::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_230_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Candidates::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_230_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidates::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_230_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Candidates::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Candidates", 1008, G__MyDict_230_0_15, (int) ('i'), G__get_linked_tagnum(&G__MyDictLN_Candidates), -1, 0, 1, 1, 1, 0, "u 'Candidates' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Candidates", 1134, G__MyDict_230_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_230_0_17, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_Candidates), -1, 1, 1, 1, 1, 0, "u 'Candidates' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMyDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMyDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMyDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MyDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_MuonTime = { "MuonTime" , 115 , -1 };
G__linked_taginfo G__MyDictLN_MuonTimecLcLDirection = { "MuonTime::Direction" , 101 , -1 };
G__linked_taginfo G__MyDictLN_TreeLepton = { "TreeLepton" , 115 , -1 };
G__linked_taginfo G__MyDictLN_TreeDipseudoLeptonCandidate = { "TreeDipseudoLeptonCandidate" , 115 , -1 };
G__linked_taginfo G__MyDictLN_pairlEintcOfloatgR = { "pair<int,float>" , 115 , -1 };
G__linked_taginfo G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR = { "vector<pair<int,float>,allocator<pair<int,float> > >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,float>,allocator<pair<int,float> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TreePhoton = { "TreePhoton" , 115 , -1 };
G__linked_taginfo G__MyDictLN_TreeDiphotonCandidate = { "TreeDiphotonCandidate" , 115 , -1 };
G__linked_taginfo G__MyDictLN_Candidates = { "Candidates" , 115 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR = { "vector<TreeLepton,allocator<TreeLepton> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETreeLeptoncOallocatorlETreeLeptongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TreeLepton,allocator<TreeLepton> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR = { "vector<TreeDipseudoLeptonCandidate,allocator<TreeDipseudoLeptonCandidate> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TreeDipseudoLeptonCandidate,allocator<TreeDipseudoLeptonCandidate> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR = { "vector<TreePhoton,allocator<TreePhoton> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETreePhotoncOallocatorlETreePhotongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TreePhoton,allocator<TreePhoton> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR = { "vector<TreeDiphotonCandidate,allocator<TreeDiphotonCandidate> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TreeDiphotonCandidate,allocator<TreeDiphotonCandidate> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMyDict() {
  G__MyDictLN_TClass.tagnum = -1 ;
  G__MyDictLN_TBuffer.tagnum = -1 ;
  G__MyDictLN_TMemberInspector.tagnum = -1 ;
  G__MyDictLN_TObject.tagnum = -1 ;
  G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MyDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MyDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__MyDictLN_MuonTime.tagnum = -1 ;
  G__MyDictLN_MuonTimecLcLDirection.tagnum = -1 ;
  G__MyDictLN_TreeLepton.tagnum = -1 ;
  G__MyDictLN_TreeDipseudoLeptonCandidate.tagnum = -1 ;
  G__MyDictLN_pairlEintcOfloatgR.tagnum = -1 ;
  G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_TreePhoton.tagnum = -1 ;
  G__MyDictLN_TreeDiphotonCandidate.tagnum = -1 ;
  G__MyDictLN_Candidates.tagnum = -1 ;
  G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETreeLeptoncOallocatorlETreeLeptongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETreePhotoncOallocatorlETreePhotongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMyDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MyDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseDiaglEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_MuonTime),sizeof(MuonTime),-1,262400,(char*)NULL,G__setup_memvarMuonTime,G__setup_memfuncMuonTime);
   G__get_linked_tagnum_fwd(&G__MyDictLN_MuonTimecLcLDirection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_TreeLepton),sizeof(TreeLepton),-1,262400,(char*)NULL,G__setup_memvarTreeLepton,G__setup_memfuncTreeLepton);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_TreeDipseudoLeptonCandidate),sizeof(TreeDipseudoLeptonCandidate),-1,262400,(char*)NULL,G__setup_memvarTreeDipseudoLeptonCandidate,G__setup_memfuncTreeDipseudoLeptonCandidate);
   G__get_linked_tagnum_fwd(&G__MyDictLN_pairlEintcOfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlEpairlEintcOfloatgRcOallocatorlEpairlEintcOfloatgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_TreePhoton),sizeof(TreePhoton),-1,262400,(char*)NULL,G__setup_memvarTreePhoton,G__setup_memfuncTreePhoton);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_TreeDiphotonCandidate),sizeof(TreeDiphotonCandidate),-1,262400,(char*)NULL,G__setup_memvarTreeDiphotonCandidate,G__setup_memfuncTreeDiphotonCandidate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_Candidates),sizeof(Candidates),-1,291072,(char*)NULL,G__setup_memvarCandidates,G__setup_memfuncCandidates);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETreeLeptoncOallocatorlETreeLeptongRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETreeLeptoncOallocatorlETreeLeptongRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETreeDipseudoLeptonCandidatecOallocatorlETreeDipseudoLeptonCandidategRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETreePhotoncOallocatorlETreePhotongRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETreePhotoncOallocatorlETreePhotongRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETreeDiphotonCandidatecOallocatorlETreeDiphotonCandidategRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMyDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMyDict()");
  G__set_cpp_environmentMyDict();
  G__cpp_setup_tagtableMyDict();

  G__cpp_setup_inheritanceMyDict();

  G__cpp_setup_typetableMyDict();

  G__cpp_setup_memvarMyDict();

  G__cpp_setup_memfuncMyDict();
  G__cpp_setup_globalMyDict();
  G__cpp_setup_funcMyDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMyDict();
  return;
}
class G__cpp_setup_initMyDict {
  public:
    G__cpp_setup_initMyDict() { G__add_setup_func("MyDict",(G__incsetup)(&G__cpp_setupMyDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMyDict() { G__remove_setup_func("MyDict"); }
};
G__cpp_setup_initMyDict G__cpp_setup_initializerMyDict;

